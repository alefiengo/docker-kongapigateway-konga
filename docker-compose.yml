name: ${COMPOSE_PROJECT_NAME:-kong-oss-stack}

volumes:
  kong_db_data:
    driver: local
    labels:
      com.kong.description: "PostgreSQL data volume for Kong Gateway"

networks:
  kong-net:
    driver: bridge
    labels:
      com.kong.description: "Internal network for Kong services"

x-kong-env: &kong-env
  KONG_DATABASE: ${KONG_DATABASE:-postgres}
  KONG_PG_HOST: ${KONG_PG_HOST:-kong-database}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}

services:
  kong-database:
    image: ${POSTGRES_IMAGE:-postgres:15-alpine}
    container_name: kong-database
    restart: on-failure
    volumes:
      - kong_db_data:/var/lib/postgresql/data
    networks:
      - kong-net
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-kong}
      POSTGRES_USER: ${POSTGRES_USER:-kong}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-kong}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 5s
      timeout: 10s
      retries: 10
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    labels:
      com.kong.service: "database"
      com.kong.description: "PostgreSQL database for Kong Gateway"

  kong-migrations:
    image: ${KONG_IMAGE:-kong:3.6.1}
    container_name: kong-migrations
    restart: on-failure
    networks:
      - kong-net
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      <<: *kong-env
    command: kong migrations bootstrap
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    labels:
      com.kong.service: "migrations"
      com.kong.description: "Kong database migrations"

  kong:
    image: ${KONG_IMAGE:-kong:3.6.1}
    container_name: kong
    restart: unless-stopped
    networks:
      - kong-net
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
    environment:
      <<: *kong-env
      KONG_ADMIN_LISTEN: ${KONG_ADMIN_LISTEN:-0.0.0.0:8001}
      KONG_STATUS_LISTEN: ${KONG_STATUS_LISTEN:-0.0.0.0:8100}
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000, 0.0.0.0:8443 ssl}"
      KONG_ADMIN_ACCESS_LOG: ${KONG_ADMIN_ACCESS_LOG:-/dev/stdout}
      KONG_ADMIN_ERROR_LOG: ${KONG_ADMIN_ERROR_LOG:-/dev/stderr}
      KONG_PROXY_ACCESS_LOG: ${KONG_PROXY_ACCESS_LOG:-/dev/stdout}
      KONG_PROXY_ERROR_LOG: ${KONG_PROXY_ERROR_LOG:-/dev/stderr}
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 30s
    ports:
      - "${KONG_PROXY_PORT:-8000}:8000"
      - "${KONG_PROXY_SSL_PORT:-8443}:8443"
      - "${KONG_ADMIN_PORT:-8001}:8001"
      - "${KONG_STATUS_PORT:-8100}:8100"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      com.kong.service: "gateway"
      com.kong.description: "Kong API Gateway"
      com.kong.version: "3.6.1"

  konga:
    image: ${KONGA_IMAGE:-pantsel/konga:0.14.9}
    container_name: konga
    restart: unless-stopped
    networks:
      - kong-net
    depends_on:
      kong:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      TOKEN_SECRET: ${KONGA_TOKEN_SECRET:-change-me}
      NO_AUTH: ${KONGA_NO_AUTH:-false}
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:1337"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    ports:
      - "${KONGA_PORT:-1337}:1337"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    labels:
      com.kong.service: "admin-ui"
      com.kong.description: "Konga Admin UI for Kong Gateway"
      com.kong.version: "0.14.9"
